import unittest
from src import cic_ms
import numpy as np


class TestCicMs(unittest.TestCase):
    def test_calc_mean_var_z_alpha_beta(self):
        all_zab = np.array([])

        for alpha_index, alpha in enumerate(self.cmt_str_lst_fs_fs):
            for beta in self.cmt_str_lst_fs_fs[alpha_index + 1:]:
                all_zab = np.append(all_zab,
                                    cic_ms.calc_z_alpha_beta(
                                        self.roi_name_lst,
                                        self.exp_std_w_a_b,
                                        alpha, beta, self.exp_M, self.res_dct))
        exp_mean_var = (np.mean(all_zab), np.var(all_zab))

        mean_var = cic_ms.calc_mean_var_z_alpha_beta(self.roi_name_lst,
                                                     self.exp_std_w_a_b,
                                                     self.cmt_str_lst_fs_fs,
                                                     self.exp_M,
                                                     self.res_dct)
        self.assertEqual(exp_mean_var, mean_var)

    def test_calc_z_alpha_beta(self):
        for d in self.tdl:
            std_w_a_b = cic_ms.\
                        calc_std_w_alpha_beta(self.roi_name_lst,
                                              self.cmt_str_lst_fs_fs,
                                              self.res_dct)
            self.assertEqual(self.exp_std_w_a_b, std_w_a_b)

            w_a_b = cic_ms.w_alpha_beta(roi_name_lst=self.roi_name_lst,
                                        alpha=d['alpha'],
                                        beta=d['beta'],
                                        res_dct=self.res_dct)['alpha_and_beta']
            self.assertEqual(d['exp_w_a_b'], w_a_b)

            Ma = cic_ms.w_alpha_beta(self.roi_name_lst,
                                     d['alpha'],
                                     d['beta'],
                                     self.res_dct)['alpha_only']
            self.assertEqual(d['exp_Ma'], Ma)

            Mb = cic_ms.w_alpha_beta(self.roi_name_lst,
                                     d['alpha'],
                                     d['beta'],
                                     self.res_dct)['beta_only']
            self.assertEqual(d['exp_Mb'], Mb)

            M = cic_ms.n_choose_2(len(self.roi_name_lst))
            self.assertEqual(self.exp_M, M)

            exp_z_alpha_beta = ((1/self.exp_std_w_a_b) * d['exp_w_a_b']) - \
                               (d['exp_Ma'] * d['exp_Mb']/float(self.exp_M))

            z_alpha_beta = cic_ms.calc_z_alpha_beta(
                roi_name_lst=self.roi_name_lst,
                std_w_alpha_beta=std_w_a_b,
                alpha=d['alpha'],
                beta=d['beta'],
                M=self.exp_M,
                res_dct=self.res_dct)

            self.assertEqual(exp_z_alpha_beta, z_alpha_beta)

    def test_calc_stdev_w_a_b(self):
        std_w_a_b = cic_ms.\
                    calc_std_w_alpha_beta(self.roi_name_lst,
                                          self.cmt_str_lst_fs_fs,
                                          self.res_dct)

        self.assertEqual(self.exp_std_w_a_b, std_w_a_b)

    def test_cons_mtx(self):
        exp_D = np.array([[0, 2.0/3.0, 0],
                          [2.0/3.0, 0, 1.0/3.0],
                          [0, 1.0/3.0, 0]])
        D = cic_ms.cons_mtx_npa(self.roi_name_lst, self.cmt_str_lst_fs_fs)
        self.assertEqual(exp_D.tolist(), D.tolist())

    def test_cmt_str(self):
        D = np.array([[0, 1, 0],
                      [1, 0, 0],
                      [0, 0, 0]])
        exp_cmt_str = [['AAA', 'BBB'], ['CCC']]
        cmt_str = cic_ms.cmt_str(self.roi_name_lst, D)
        self.assertEqual(exp_cmt_str, cmt_str)

    def test_run_louvain(self):
        exp_cmt_str_lst_lst = [[['AAA', 'BBB'], ['CCC']], [['AAA', 'BBB'],
                                                           ['CCC']]]
        ctx_mtx_npa = np.array([[0, 2.0/3.0, 0],
                                [2.0/3.0, 0, 0],
                                [0, 0, 0]])

        cmt_str_lst_lst = cic_ms.run_louvain(roi_name_lst=self.roi_name_lst,
                                             ctx_mtx_npa=ctx_mtx_npa,
                                             gamma=1.0,
                                             runs=2)

        self.assertEqual(exp_cmt_str_lst_lst, cmt_str_lst_lst)

    def test_calc_cons_cmt_str(self):
        exp_cons_cmt_str = [['AAA', 'BBB', 'CCC']]

        cons_cmt_str = cic_ms.calc_cons_cmt_str(
            roi_name_lst=self.roi_name_lst,
            cmt_str_lst_lst=cic_ms.lst_fs_fs_to_lst_lst_lst(
                self.cmt_str_lst_fs_fs),
            gamma=1.0,
            runs=len(self.cmt_str_lst_fs_fs),
            tau=0.1)

        self.assertEqual(exp_cons_cmt_str, cons_cmt_str)

    def test_pair_in_alpha_beta(self):
        alpha = [['AAA'], ['BBB', 'CCC'], ['DDD'], ['EEE', 'FFF']]
        beta = [['AAA'], ['BBB', 'DDD'], ['CCC'], ['EEE', 'FFF']]

        tests = [{'roi_name_a': 'AAA',
                  'roi_name_b': 'BBB',
                  'result': {'alpha_and_beta': False,
                             'alpha_only': False,
                             'beta_only': False}},
                 {'roi_name_a': 'BBB',
                  'roi_name_b': 'CCC',
                  'result': {'alpha_and_beta': False,
                             'alpha_only': True,
                             'beta_only': False}},
                 {'roi_name_a': 'BBB',
                  'roi_name_b': 'DDD',
                  'result': {'alpha_and_beta': False,
                             'alpha_only': False,
                             'beta_only': True}},
                 {'roi_name_a': 'EEE',
                  'roi_name_b': 'FFF',
                  'result': {'alpha_and_beta': True,
                             'alpha_only': False,
                             'beta_only': False}}]

        for test in tests:
            result = cic_ms.pair_in_alpha_beta(roi_name_a=test['roi_name_a'],
                                               roi_name_b=test['roi_name_b'],
                                               alpha=alpha,
                                               beta=beta)
            self.assertEqual(test['result'], result)

    def setUp(self):
        self.roi_name_lst = ['AAA', 'BBB', 'CCC']

        self.exp_std_w_a_b = 0.49705590688271156
        self.exp_M = 3

        self.res_dct = {}

        # huge list to test time
        self.cmt_str_lst_fs_fs = \
            [frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'CCC'}), frozenset({'AAA', 'BBB'})}),
             frozenset({frozenset({'BBB', 'CCC'}), frozenset({'AAA'})})]

        self.crazy_clust_lst = [set(['Alcam']), set(['Arhgap12']),
                                set(['Arl15']), set(['Astn2']),
                                set(['Bcat1']), set(['Bcl6']),
                                set(['Bhlhe40']), set(['Btg1']),
                                set(['Btg3']), set(['Bves']),
                                set(['C1ql2']), set(['Cachd1']),
                                set(['Cacna1g']), set(['Cacng5']),
                                set(['Car12']), set(['Cbln2']),
                                set(['Ccdc3']), set(['Cd24a']),
                                set(['Cd44']), set(['Cdc25b']),
                                set(['Cdh10']), set(['Cdh11']),
                                set(['Cdh2']), set(['Cdh24']),
                                set(['Cdh8']), set(['Cdh9']),
                                set(['Cds1']), set(['Chrm2']),
                                set(['Chst8']), set(['Cntnap2']),
                                set(['Coch']), set(['Col12a1']),
                                set(['Col15a1']), set(['Col5a1']),
                                set(['Col6a1']), set(['Col6a2']),
                                set(['Cpne7']), set(['Cpne8']),
                                set(['Crim1']), set(['Crym']),
                                set(['Ctgf']), set(['Ctnna2']),
                                set(['Cyp26b1']), set(['Cyp7b1']),
                                set(['D930040M24Rik (L3mbtl4)']),
                                set(['Dab1']),
                                set(['Dcc']), set(['Dcn']),
                                set(['Dio3']), set(['Dkk3']),
                                set(['Dlk1']), set(['Dnah9']),
                                set(['Dock10']), set(['Dpf3']),
                                set(['Dscr1 (Rcan1)']), set(['Dusp6']),
                                set(['Efna5']), set(['Efnb2']),
                                set(['Efnb3']), set(['Egr3']),
                                set(['Epha3']), set(['Epha4']),
                                set(['Epha5']), set(['Epha7']),
                                set(['Ephb1']), set(['Eya2']),
                                set(['Fam40b (Strip2)']), set(['Far2']),
                                set(['Fibcd1']), set(['Fmo1']),
                                set(['Fosl2']), set(['Foxp1']),
                                set(['Fras1']), set(['Frzb']),
                                set(['Fxyd5']), set(['Fxyd6']),
                                set(['Gabra1']), set(['Galntl6']),
                                set(['Glt8d2']), set(['Gm1399 (LOC384349 )']),
                                set(['Gm1441']), set(['Gpr125']),
                                set(['Grid1']), set(['Grik1']),
                                set(['Grik4']), set(['Grin3a']),
                                set(['Grp']), set(['Gsto1']),
                                set(['Hkdc1']), set(['Hrh3']),
                                set(['Hs6st3']), set(['Htr2c']),
                                set(['Htr4']), set(['Hunk']),
                                set(['Ifi205']), set(['Igfbp4']),
                                set(['Igfbp6']), set(['Igsf4d (Cadm2)']),
                                set(['Igsf9b']), set(['Iqcj']),
                                set(['Itga7']), set(['Itgbl1']),
                                set(['Iyd']), set(['Kcnab1']),
                                set(['Kcnab2']), set(['Kcnc1']),
                                set(['Kcnc2']), set(['Kcnd2']),
                                set(['Kcnd3']), set(['Kcnf1']),
                                set(['Kcng3']), set(['Kcnh7']),
                                set(['Kcnip3']), set(['Kcnk1']),
                                set(['Kcnq5']), set(['Kctd1']),
                                set(['Kctd12']), set(['Kctd4']),
                                set(['LOC434300']), set(['Lct']),
                                set(['Ldb2']), set(['Lifr']),
                                set(['Lmo1']), set(['Loxl1']),
                                set(['Lrmp']), set(['Ltk']),
                                set(['Lxn']), set(['Mal2']),
                                set(['Man1a']), set(['Map3k15']),
                                set(['Map4k3']), set(['Mas1']),
                                set(['Matn2']), set(['Mela']),
                                set(['Mgst3']), set(['Mpped1']),
                                set(['Mycl']), set(['Mylk']),
                                set(['Nab1']), set(['Ncam2']),
                                set(['Ndst3']), set(['Ndst4']),
                                set(['Negr1']), set(['Neuromedin B']),
                                set(['Nfxl1']), set(['Nov']),
                                set(['Npy1r']), set(['Nt5dc3']),
                                set(['Ntng1']), set(['Ntng2']),
                                set(['Nts']), set(['Opcml']),
                                set(['Ostf1']), set(['P2rx5']),
                                set(['P2rx7']), set(['Parm1']),
                                set(['Parvg']), set(['Pcdh20']),
                                set(['Pcdh21']), set(['Pcp4']),
                                set(['Pcsk5']), set(['Peg10']),
                                set(['Phactr4']), set(['Pkp2']),
                                set(['Plagl1']), set(['Pole4']),
                                set(['Prex1']), set(['Prkca']),
                                set(['Prkcd']), set(['Prss12']),
                                set(['Prss35']), set(['Psrc1']),
                                set(['Ptgs2']), set(['Ptprd']),
                                set(['Ptpro']), set(['Ptpru']),
                                set(['Pvrl1']), set(['Pvrl3']),
                                set(['Robo1']), set(['Robo2']),
                                set(['Rph3a']), set(['Rprm']),
                                set(['Rxfp1']), set(['S100a10']),
                                set(['Samd14']), set(['Satb2']),
                                set(['Scn3b']), set(['Sdk2']),
                                set(['Sema3e']), set(['Sema4g']),
                                set(['Sema5a']), set(['Sema5b']),
                                set(['Sik3']), set(['Slc17a6']),
                                set(['Slc26a10']), set(['Slc9a2']),
                                set(['Slit2']), set(['Smoc2']),
                                set(['Sntb1']), set(['Snx25']),
                                set(['Sorcs2']), set(['Sstr4']),
                                set(['St18']), set(['St6galnac3']),
                                set(['Stac']), set(['Stard5']),
                                set(['Tbc1d1']), set(['Tcerg1l']),
                                set(['Tdo2']), set(['Teddm3*']),
                                set(['Tex40']), set(['Tgfb2']),
                                set(['Thrsp']), set(['Tiam2']),
                                set(['Tle4']), set(['Tmem178']),
                                set(['Tmem65']), set(['Tnfaip8l3']),
                                set(['Tpbg']), set(['Trhr']),
                                set(['Etv1', 'Fezf2',
                                     'Cadps2', 'Thrb',
                                     'Nrip1', 'Kcnn2',
                                     'Trpc4', 'Mm.26272',
                                     'Pde11a', 'Gpr161',
                                     'A730096l18Rik']), set(['Trps1']),
                                set(['Tspan33']), set(['Ttn']),
                                set(['Tyro3']), set(['Wfs1']),
                                set(['Zbtb20']), set(['Zdbf2']),
                                set(['Zdhhc7']), set(['Zfp462']),
                                set(['Kcnab3', 'Ankrd34b',
                                     'Rbp4', 'Akr1c18',
                                     'Btbd11', 'Elfn1']),
                                set(['Dpysl5', 'Slc35f1',
                                     'Csf2rb2', 'Drd2',
                                     'Nr2f1', 'Calb2',
                                     'Adcyap1', 'Chl1', 'Amigo2'])]

        self.tdl = [{'alpha': self.cmt_str_lst_fs_fs[0],
                     'beta': self.cmt_str_lst_fs_fs[1],
                     'exp_w_a_b': 1,
                     'exp_Ma': 0,
                     'exp_Mb': 0},
                    {'alpha': self.cmt_str_lst_fs_fs[0],
                     'beta': self.cmt_str_lst_fs_fs[2],
                     'exp_w_a_b': 0,
                     'exp_Ma': 1,
                     'exp_Mb': 1},
                    {'alpha': self.cmt_str_lst_fs_fs[1],
                     'beta': self.cmt_str_lst_fs_fs[2],
                     'exp_w_a_b': 0,
                     'exp_Ma': 1,
                     'exp_Mb': 1}]
